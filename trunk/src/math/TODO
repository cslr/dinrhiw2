
 - test BFGS

 - implement polyatree.* code, check scatter plot works, create test data,
   use aggloromative hierarchical clustering. maybe split at root node approach could be
   used with small sample of data. (problem. in BIG problems _small_ clusters aren't represented correctly)
 
 - test FastICA-algorithm ica implementation
 - fix SVD code so that it works always without big loss of accuracy (do it in matlab first)

 - fix sylvester equation solver
 - code&test matrix::normalize() implementation

 - make test2 compile + redesign/implement related algorithms

 - free length fourier transform
   (FFT class which precalculates length
    spefic constants + handles 2^k length
    FFTs as special case (fast))

 - do some finalizing work on the theory of 'superresolutional' numbers field 
   (with 'superscale-based' measure function extensions/idea)
   (+ think how to write optimized implementation) then -> implement all the missing parts

 - when BSC works in theory/matlab implement it   

 there's bug in bezier curve(s) code

----------------------------
 1d curve   bezier									80%
 
 pdftree - n dimensional (n <= 32bit (hardware))
	non-parameteric probability distribution					80%
        - todo: use bisets (or what were they?) to extend to generic N-dimensional code
	- todo: testing/compiling  [use dynamic_bitset]

 fast wavelet transform                                                                 0%
 (generic wavelet code + specific codes: gabor, image processing transforms)

 
POSSIBLE: 

 fast hartley transform
 free length hartley, wavelet transforms
 2d surface bezier
 3d density bezier
 uniform b-splines

 n dimensional extensions to interpolation, signal processing transforms
 
 



OPTIMIZATIONS

 - "*NO* CBLAS" parts in vertex/matrix

 - optimize matrix transposition further:
   direct access to data and address calculation in a loop

 - write assembly optimized (not available in cblas/ATLAS)
   (vector addition without coefficients)

     whiteice_sadd(unsigned int, const float* from. float* to)
     whiteice_dadd(unsigned int, const double* from, double* to)

   (vector addition with coefficients)
 
     whiteice_smix(unsigned int, float alpha, const float* from, float beta, float* to)
     whiteice_dmix(unsigned int, double alpha, const double* from, double beta, double* to)

  whiteice_Xadd() are then used in vertex/matrix/quaternion additions
  above ones are also good for signal processing applications

   choose optimization automatically based on the detected
   CPU capabilities

   1. AMD/3d now (with or without extended features)
   2. pentium simd
   3. mmx
   4. 32bit intel (simple loop)
   5. C/C++ version for other CPUs

==================================================

 
  
 
 
 