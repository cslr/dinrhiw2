/*
 * Traditional machine learning interface.
 * User of these modules should give 'raw data'
 * to LearningSystem.
 * All pre/postprocessing, analysis etc.
 * learning related tasks are
 * expected to be done before/after learning
 * are done by LearningSystem.
 * 
 * User of LearningSystem objects should,
 * however, try represent data in a ways
 * that are easier for learning systems
 * to done. 
 * 
 * This means (application specific)
 * feature calculations and
 * other non-linear mappings (FFT for example)
 * to informative and easy to use variables.
 * 
 */

module whiteice
{
  typedef sequence<float> vertex;
  typedef sequence<float> vertexlist;
  
  struct datapair {
    vertex input, output;
  };
  
  typedef sequence<datapair> dataset;
  
  
  
  interface LearningSystem
  {
    // resets, loads, saves configuration
    
    boolean reset(in unsigned long input_dimensions,
		  in unsigned long output_dimensions);
    
    boolean load(in string resourcename);
    boolean save(in string resourcename);
    
    // provides more data for learning system to use.
    // call should return (almost) immediately.
    // The results of learning from new dataset
    // should be available/alter estimate() 'soon'.
    boolean add(in dataset examples);
    
    // gives up to outputsize good output vectors
    // given input
    // ideally, output vectors should be sampled
    // from p(output|input) distribution. Methods
    // which give point estimate may give only one value.
    boolean estimate(in vertex input,
		     in unsigned long outputsize,
		     out vertexlist output);
    
    // TODO: add some sort of
    // error calculation/reporting calls
    // which can be used to estimate how well
    // problem has been learnt
  };
  
};
