# dinrhiw2 reinforcement learning
##################################################

CC = gcc
CXX= g++

OBJECTS = RIFL_abstract.o RIFL_abstract3.o CartPole.o PolicyGradAscent.o RIFL_abstract2.o CartPole2.o \
	CreateRIFLdataset.o CreateRIFL3dataset.o CreateRIFL2dataset.o CreatePolicyDataset.o \
	RotationProblem.o AdditionProblem.o

EXTRA_OBJECTS = ../dataset.o ../dynamic_bitset.o \
	../math/vertex.o ../math/matrix.o ../math/ownexception.o \
	../math/integer.o ../math/correlation.o ../math/matrix_rotations.o \
	../math/eig.o ../math/blade_math.o ../math/real.o ../math/ica.o \
	../math/quaternion.o \
	../neuralnetwork/nnetwork.o ../neuralnetwork/bayesian_nnetwork.o \
	../conffile.o ../neuralnetwork/NNGradDescent.o \
	../math/SGD.o ../neuralnetwork/SGD_recurrent_nnetwork.o \
	../math/superresolution.o ../math/modular.o \
	../neuralnetwork/deep_ica_network_priming.o ../math/linear_equations.o \
	../Log.o ../math/norms.o ../neuralnetwork/stackedRBM_pretraining.o \
	../neuralnetwork/DBN.o ../neuralnetwork/GBRBM.o ../neuralnetwork/BBRBM.o \
	../math/outerproduct.o \
	../math/LBFGS.o ../neuralnetwork/rLBFGS_recurrent_nnetwork.o \
	../neuralnetwork/rLBFGS_recurrent_nnetwork_softmax_actions.o \
	../neuralnetwork/LBFGS_GBRBM.o \
	../neuralnetwork/LBFGS_BBRBM.o ../math/RNG.o

TEST1_OBJECTS = $(OBJECTS) $(EXTRA_OBJECTS) tst/test.o

TEST2_OBJECTS = $(OBJECTS) $(EXTRA_OBJECTS) tst/test2.o

TEST3_OBJECTS = $(OBJECTS) $(EXTRA_OBJECTS) tst/test3.o

TEST4_OBJECTS = $(OBJECTS) $(EXTRA_OBJECTS) tst/test4.o

TEST4A_OBJECTS = $(OBJECTS) $(EXTRA_OBJECTS) tst/test4a.o

TEST5_OBJECTS = $(OBJECTS) $(EXTRA_OBJECTS) tst/test_minihack.o MinihackRIFL2.o

TEST6_OBJECTS = $(OBJECTS) $(EXTRA_OBJECTS) tst/test_minihack2.o MinihackRIFL.o


SOURCES = RIFL_abstract.cpp RIFL_abstract3.cpp CartPole.cpp PolicyGradAscent.cpp RIFL_abstract2.cpp \
	CreateRIFLdataset.cpp CreateRIFL3dataset.cpp CreateRIFL2dataset.cpp CreatePolicyDataset.cpp \
	RotationProblem.cpp AdditionProblem.cpp MinihackRIFL2.cpp MinihackRIFL.cpp \
	CartPole2.cpp tst/test.cpp tst/test2.cpp tst/test3.cpp tst/test4a.cpp \
	tst/test_minihack.cpp tst/test_minihack2.cpp \
	../dataset.cpp \
	../dynamic_bitset.cpp \
	../math/quaternion.cpp \
	../math/vertex.cpp \
	../math/integer.cpp ../math/blade_math.cpp ../math/real.cpp \
	../math/ownexception.cpp \
	../math/superresolution.cpp ../math/modular.cpp \
	../neuralnetwork/nnetwork.cpp ../neuralnetwork/bayesian_nnetwork.cpp \
	../conffile.cpp ../neuralnetwork/NNGradDescent.cpp \
	../neuralnetwork/deep_ica_network_priming.cpp \
	../math/SGD.cpp ../neuralnetwork/SGD_recurrent_nnetwork.cpp \
	../math/linear_equations.cpp ../math/norms.cpp ../math/eig.cpp \
	../neuralnetwork/stackedRBM_pretraining.cpp ../neuralnetwork/DBN.cpp \
	../neuralnetwork/GBRBM.cpp ../neuralnetwork/BBRBM.cpp ../math/outerproduct.cpp \
	../math/LBFGS.cpp ../neuralnetwork/rLBFGS_recurrent_nnetwork.cpp \
	../neuralnetwork/rLBFGS_recurrent_nnetwork_softmax_actions.cpp \
	../neuralnetwork/LBFGS_GBRBM.cpp ../neuralnetwork/LBFGS_BBRBM.cpp \
	../math/RNG.cpp

OPTIMIZE=-fPIC -O3 -g -DAMD64 -ffast-math -mtune=native -ftree-vectorize -fopenmp -mtune=native
CFLAGS=-g -O2 -Wno-deprecated -Wno-strict-aliasing -Wno-attributes -Wno-class-memaccess -I/usr/include/ -I/usr/local/include -I/ucrt64/include/ -I/ucrt64/include/openblas/ -DOPENBLAS -I/ucrt64/include/openblas/ -DWINOS `pkg-config python3 --cflags`

# -DUSE_SDL `pkg-config sdl2 --cflags`

TARGET1=testsuite
TARGET2=testsuite2
TARGET3=testsuite3
TARGET4=testsuite4
TARGET4A=testsuite4a
TARGET5=minihack_test
TARGET6=minihack2_test

CXXFLAGS=-Wall $(CFLAGS) -g -I. -I.. -I../.. -Iexceptions -I../math -I../neuralnetwork -I../hmm -I../rnn -I../crypto $(OPTIMIZE) -I/usr/include/python3.9 -I/mingw64/include/python3.9

LIBS=-L/usr/local/lib -L/ucrt64/lib/ -lgmp -lpthread -L/usr/lib/  -L/ucrt64/lib/ -lopenblas -lstdc++

LIBS_PYTHON=-lcrypt -lpthread -ldl -lutil -lm -L/usr/lib/python3.9/config-3.9-x86_64-linux-gnu -L/mingw64/lib/ -lpython3.9
LIBS_PYTHON=`pkg-config python3 --libs`

# `pkg-config sdl2 --libs`

CD = cd


##################################################

all: $(TEST1_OBJECTS) $(TEST2_OBJECTS) $(TEST3_OBJECTS) $(TEST4_OBJECTS) $(TEST4A_OBJECTS) $(TEST5_OBJECTS) $(TEST6_OBJECTS)
	$(CXX) $(CXXFLAGS) -o $(TARGET1) $(TEST1_OBJECTS) $(LIBS)
	$(CXX) $(CXXFLAGS) -o $(TARGET2) $(TEST2_OBJECTS) $(LIBS)
	$(CXX) $(CXXFLAGS) -o $(TARGET3) $(TEST3_OBJECTS) $(LIBS)
	$(CXX) $(CXXFLAGS) -o $(TARGET4) $(TEST4_OBJECTS) $(LIBS)
	$(CXX) $(CXXFLAGS) -o $(TARGET4A) $(TEST4A_OBJECTS) $(LIBS)
	$(CXX) $(CXXFLAGS) -o $(TARGET5) $(TEST5_OBJECTS) $(LIBS) $(LIBS_PYTHON)
	$(CXX) $(CXXFLAGS) -o $(TARGET6) $(TEST6_OBJECTS) $(LIBS) $(LIBS_PYTHON)

clean:
	$(RM) $(TEST1_OBJECTS)
	$(RM) $(TARGET1)
	$(RM) $(TEST2_OBJECTS)
	$(RM) $(TARGET2)
	$(RM) $(TEST3_OBJECTS)
	$(RM) $(TARGET3)
	$(RM) $(TEST4_OBJECTS)
	$(RM) $(TARGET4)
	$(RM) $(TEST4A_OBJECTS)
	$(RM) $(TARGET4A)
	$(RM) $(TEST5_OBJECTS)
	$(RM) $(TARGET5)
	$(RM) $(TEST6_OBJECTS)
	$(RM) $(TARGET6)
	$(RM) *~

realclean: clean

depend:
	$(CXX) $(CXXFLAGS) -MM $(SOURCES) > Makefile.depend


##################################################

include Makefile.depend





