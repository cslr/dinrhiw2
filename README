WHAT DINRHIW2 IS?
-----------------

Dinrhiw is a linear algebra library and machine learning  library.
Dinrhiw implements PCA and neural network codes. Currently,
the feedforward neural network code supports:

* second order L-BFGS optimization and gradient descent (backpropagation)
* hamiltonian monte carlo sampling (HMC) and simple bayesian neural network
* parallel computing (via OpenMP)
* experimental branch (RBM_test): GB-RBM and BB-RBM 2nd order
  LBFGS optimizer and HMC sampler => greedy deep belief net optimizer
  
Read wiki pages for further documentation: https://github.com/cslr/dinrhiw2/wiki
  

BUILDING IT
-----------

You need GNU GCC (www.gcc.org). The code compiles both on Linux and
Windows (requiring *nix environment). It is recommended to try
to compile and use the library initially on Linux.

Library requirements:

* OpenBLAS (cblas.h interface),
* GMP (arbitrary precision mathematics) [not really needed]
* ZLib (memory compression) [not really needed]


To build and install library execute: 


./build.sh
make install


commands at the top level.


For the working examples how to use dinrhiw look at the *tools* directory
below the root dictory.

Building it (you need to install bison parser) creates programs:

dstool and nntool - dataset management and neural network weight learning.

So the keyfiles to read for the (neural network) documentation are

tools/nntool.cpp
src/dataset.h
src/neuralnetwork/nnetwork.h

Expecially the first one shows how to use nnetwork<> class properly to 
learn from the data. Note that it only accepts aprox. [-1,1] valued data
as a default so proper preprocessing of the data using dataset class can
be very important in order to keep data within the correct range 
(+ PCA preprocessing can make the learning from the data exponentially 
   faster in some cases).

IMPORTANT: There is also (alternative) neural network implementation
           in neuralnetwork.h and related files that DO NOT work.

Additionally, there are 

tools/test_data.sh
tools/test_data2.sh
tools/test_data3.sh
tools/test_data3_bayes.sh


scripts that shows how the learning and data prediction from example data 
works in practice using dstool and nntool commands
(only bayes and feedforward training).

Use of RBM neural networks requires direct use the library
(C++ interface classes).


ADDITIONAL NOTES
----------------

The library contains needless implementation of various algorithms
that DO NOT belong to this library. They will be removed slowly
before 1.0 release. (cleanup the code)


PLAN
----

In development:

Stacked RBMs (GB-RBM + BB-RBMs) and implementation of DBN networks,
which can be transformed to nnetwork and further trained using output examples.

Finally add support of parallel DBN pretraining + nnetwork optimization to tools ("nntool").

Release version 1.0


(possible ideas after 1.0)

FOCUS: generalization capabilities of neural networks. Neural network
optimization works rather well but currently dinrhiw does a poor job
when the solutions should extrapolate or interpolate to outside.


Recurrent neural networks (with memory) and reinforcement learning.

